problem:Write a function to split a string and convert it into an array of words.

Examples (Input ==> Output):
"Robin Singh" ==> ["Robin", "Singh"]

"I love arrays they are my favorite" ==> ["I", "love", "arrays", "they", "are", "my", "favorite"]
Words will be separated by exactly one space, without leading or trailing spaces.

There will only be letters and spaces in the input string.


Code:
#include <stdlib.h>
#include <string.h>  // Include string.h for strdup and strtok

size_t count_words(const char *words) {
    int count = 0;
    int in_word = 0;  // Add declaration for in_word variable

    while (*words) {
        if (*words == ' ') {
            in_word = 0;  // Not inside a word anymore
        } else if (!in_word) {
            count++;  // Found a new word
            in_word = 1;  // Inside a word now
        }
        words++;
    }

    return count;
}

void words_to_array(const char *words, char *words_array[]) {
    char *copy = strdup(words);  // Duplicate the input string
    char *tok = strtok(copy, " ");  // Tokenize the string by spaces
    int i = 0;  // Index for storing tokens

    while (tok != NULL) {  // Loop until no more tokens
        words_array[i] = strdup(tok);  // Copy each token into the array
        i++;
        tok = strtok(NULL, " ");  // Get the next token
    }

    free(copy);  
}

Explantion:
#include <stdlib.h>
#include <string.h>  // Include string.h for strdup and strtok

int count_words (const char *words)//int this function  taking the words as a charcter
{
  int count = 0;
    int in_words= 0;
    
   
    while (*words) {
       if (*words == ' ') {
            in_words= 0;
        } else if (!in_words) {
            count++;
            in_words = 1;
        }
        words++;
    }

    return count;

}

void words_to_array (const char *words, char *words_array[])//words_to_arrAY FUNCTION taking the one string words and one pointer array that is *words_array[]
{
char *copy = strdup(words);//here we are making the copy of the words(string).to avoid modifying the original string after perforing some operations
    char *tok = strtok(copy, " ");//tok are storing substings of the copy that are separated by space, we are passing copy string and " "
    int i = 0;//intitilaizer to check where the string has to strtok runs,it runs until the string completely checks
    while (tok != '\0') {////it cheks the string until the tok is not come to null
        
        words_array[i] = strdup(tok);
        i++;//increasing the count to traverse the string
        tok = strtok(NULL, " ");//when first call pass it returns the first charchter in the string it returns the '\0' in the end of that find string this strok(null,"") pass that '\0' to the asing againwhere it lefts tha string checking    }
free(copy); //free the space that are allocated by the copy string
}



strdup:The strdup function is used to create a duplicate of the input string words (to avoid modifying the original string). The duplicated string is stored in copy.
strtok:The strtok function is used to break the string copy into tokens (substrings). The delimiter is a space (" "), meaning the string will be split by spaces
strtok is a function from the C standard library, and it is used to split a string into a series of tokens (substrings). It operates in a stateful manner, meaning it maintains an internal state to track where it left off in the string between calls.

 if copy is "Hello World", strtok will modify copy to look like this:

"Hello\0World" (where \0 is the null terminator that marks the end of the first token).
It returns "Hello" (a pointer to the start of this token).