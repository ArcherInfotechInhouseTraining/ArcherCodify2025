Given an integer array arr, return all the unique pairs [arr[i], arr[j]] such that i != j and arr[i] + arr[j] == 0.

Note: The pairs must be returned in sorted order, the solution array should also be sorted, and the answer must not contain any duplicate pairs.

Examples:

Input: arr = [-1, 0, 1, 2, -1, -4]
Output: [[-1, 1]]
Explanation: arr[0] + arr[2] = (-1)+ 1 = 0.
arr[2] + arr[4] = 1 + (-1) = 0.
The distinct pair are [-1,1].
Input: arr = [6, 1, 8, 0, 4, -9, -1, -10, -6, -5]
Output: [[-6, 6],[-1, 1]]
Explanation: The distinct pairs are [-1, 1] and [-6, 6].
Expected Time Complexity: O(n log n)
Expected Auxiliary Space: O(n).

Constraints:
3 <= arr.size <= 105
-105 <= arr[i] <= 105


class Solution {
    public static ArrayList<ArrayList<Integer>> getPairs(int[] arr) {

        Arrays.sort(arr);
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        HashSet<ArrayList<Integer>> uniquePairs = new HashSet<>();
        
        int left = 0;
        int right = arr.length - 1;
        
        while (left < right) {
            int sum = arr[left] + arr[right];
            
            if (sum == 0) {
                ArrayList<Integer> pair = new ArrayList<>();
                pair.add(arr[left]);
                pair.add(arr[right]);
                if (!uniquePairs.contains(pair)) {
                    uniquePairs.add(pair);
                    result.add(pair);
                }
                
                left++;
                right--;
            } else if (sum < 0) {
                left++;
            } else {
                right--;
            }
        }
        return result;
    }
}


Sorting the Array: We sort the array to ensure the pairs are in sorted order.

Two-Pointer Technique: We use two pointers (left and right) to find pairs that sum to zero:

If the sum of the elements at left and right is zero, we add the pair to the result list and move both pointers inward.

If the sum is less than zero, we move the left pointer to the right to increase the sum.

If the sum is greater than zero, we move the right pointer to the left to decrease the sum.