You are given an array arr[] of non-negative numbers. Each number tells you the maximum number of steps you can jump forward from that position.

For example:

If arr[i] = 3, you can jump 1 step, 2 steps, or 3 steps forward from position i.
If arr[i] = 0, you cannot jump forward from that position.
Your task is to find the minimum number of jumps needed to move from the first position in the array to the last position.

Note:  Return -1 if you can't reach the end of the array.

Examples : 

Input: arr[] = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9]
Output: 3 
Explanation: First jump from 1st element to 2nd element with value 3. From here we jump to 5th element with value 9, and from here we will jump to the last. 
Input: arr = [1, 4, 3, 2, 6, 7]
Output: 2 
Explanation: First we jump from the 1st to 2nd element and then jump to the last element.
Input: arr = [0, 10, 20]
Output: -1
Explanation: We cannot go anywhere from the 1st element.

class Solution {
    static int minJumps(int[] arr) {
        if (arr.length <= 1) return 0;
        if (arr[0] == 0) return -1;

        int jumps = 1;
        int maxReach = arr[0];
        int steps = arr[0];

        for (int i = 1; i < arr.length; i++) {
            if (i == arr.length - 1) return jumps;
            maxReach = Math.max(maxReach, i + arr[i]);
            steps--;
            if (steps == 0) {
                jumps++;
                if (i >= maxReach) return -1;
                steps = maxReach - i;
            }
        }
        return -1;
    }
}



Explanation:
Initial Checks: If the array length is 1 or less, no jumps are needed. If the first element is 0, it's impossible to move anywhere, so return -1.

Initialize Variables: jumps keeps track of the total number of jumps. maxReach represents the furthest index we can reach with current jumps. steps indicates the number of steps we can take within the current jump.

Iterate: Traverse the array from index 1:

If we reach the end of the array, return the jump count.

Update maxReach to the maximum index we can reach.

Decrease the steps by 1.

If steps becomes 0, we increment jumps and reset steps to the difference between maxReach and the current index.

Return -1: If we can't make any more jumps, return -1.