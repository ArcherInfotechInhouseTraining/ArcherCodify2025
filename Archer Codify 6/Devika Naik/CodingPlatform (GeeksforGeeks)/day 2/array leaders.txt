https://www.geeksforgeeks.org/problems/leaders-in-an-array-1587115620/1?page=1&difficulty=Basic,Easy&sortBy=submissions
You are given an array arr of positive integers. Your task is to find all the leaders in the array. An element is considered a leader if it is greater than or equal to all elements to its right. The rightmost element is always a leader.

Examples:

Input: arr = [16, 17, 4, 3, 5, 2]
Output: [17, 5, 2]
Explanation: Note that there is nothing greater on the right side of 17, 5 and, 2.
Input: arr = [10, 4, 2, 4, 1]
Output: [10, 4, 4, 1]
Explanation: Note that both of the 4s are in output, as to be a leader an equal element is also allowed on the right. side
Input: arr = [5, 10, 20, 40]
Output: [40]
Explanation: When an array is sorted in increasing order, only the rightmost element is leader.
Input: arr = [30, 10, 10, 5]
Output: [30, 10, 10, 5]
Explanation: When an array is sorted in non-increasing order, all elements are leaders.

class Solution {
    static ArrayList<Integer> leaders(int arr[]) {
        ArrayList<Integer> result = new ArrayList<>();
        int n = arr.length;
        int maxFromRight = arr[n - 1];

        result.add(maxFromRight);

        for (int i = n - 2; i >= 0; i--) {
            if (arr[i] >= maxFromRight) {
                maxFromRight = arr[i];
                result.add(maxFromRight);
            }
        }
        Collections.reverse(result);
        return result;
    }
}

learned what is collections 
: This imports the Collections class, which provides utility methods for working with collections, including reversing a list.
Collections.reverse(result);: This reverses the result list to maintain the original order of leaders in the array.

int maxFromRight = arr[n - 1];: This initializes maxFromRight with the last element of the array (arr[n - 1]).
result.add(maxFromRight);: This adds the rightmost element to the result list because it is always a leader.

for (int i = n - 2; i >= 0; i--) {: This starts a loop that iterates from the second-to-last element to the first element of the array
if (arr[i] >= maxFromRight) {: This checks if the current element is greater than or equal to maxFromRight.

maxFromRight = arr[i];: If the current element is greater than or equal to maxFromRight, this updates maxFromRight to the current element.

result.add(maxFromRight);: This adds the current element to the result list.
