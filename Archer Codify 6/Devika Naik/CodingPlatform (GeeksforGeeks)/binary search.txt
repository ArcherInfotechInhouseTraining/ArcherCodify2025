Given a sorted array arr and an integer k, find the position(0-based indexing) at which k is present in the array using binary search.

Note: If multiple occurrences are there, please return the smallest index.

Examples:

Input: arr[] = [1, 2, 3, 4, 5], k = 4
Output: 3
Explanation: 4 appears at index 3.
Input: arr[] = [11, 22, 33, 44, 55], k = 445
Output: -1
Explanation: 445 is not present.
Input: arr[] = [1, 1, 1, 1, 2], k = 1
Output: 0
Explanation: 1 appears at index 0.

implementation of binary search 

initialize variables low and high;
calculate the length of the array:
low=0
high=n-1;
result=-1;
unless and until the low<=high is true 
calculate the mid=low+high/2
if the array element at mid index == to the element to be find result=mid index continue searching if there are multiple copies of k in an array by decreasing the by high = mid-1.
else if if array element at mid is less then K increase the low=mid+1;
else decrease the high=mid-1;
return the result.

class Solution {
    public int binarysearch(int[] arr, int k) {
        int n = arr.length;
        int low =0;
        int high = n-1;
        int result = -1;
        while(low<=high){
            int mid = (low+high)/2;
            if(arr[mid]==k){
                result= mid;
                high = mid - 1;
            }
            else if(arr[mid]<k){
                low = mid + 1;
            }
            else{
                high = mid-1;
            }
        }
        return result;
    }
}