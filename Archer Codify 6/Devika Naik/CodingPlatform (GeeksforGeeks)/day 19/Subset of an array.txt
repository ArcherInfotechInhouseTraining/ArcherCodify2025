Given two arrays a[] and b[], your task is to determine whether b[] is a subset of a[].

Examples:

Input: a[] = [11, 7, 1, 13, 21, 3, 7, 3], b[] = [11, 3, 7, 1, 7]
Output: true
Explanation: b[] is a subset of a[]
Input: a[] = [1, 2, 3, 4, 4, 5, 6], b[] = [1, 2, 4]
Output: true
Explanation: b[] is a subset of a[]
Input: a[] = [10, 5, 2, 23, 19], b[] = [19, 5, 3]
Output: false
Explanation: b[] is not a subset of a[]
Constraints:
1 <= a.size(), b.size() <= 105
1 <= a[i], b[j] <= 106



Step 1: Create a frequency map (HashMap<Integer, Integer>) to count occurrences of elements in a[].
Step 2: Iterate over b[], checking if each element exists in a[] with enough occurrences.
	If an element is found in a[], decrement its count in the frequency map.
	If an element is missing or has been used up, return false.
Step 3: If all elements in b[] are satisfied, return true.


class Solution {
    public boolean isSubset(int a[], int b[]) {
        HashMap<Integer, Integer> freqMap = new HashMap<>();
        for (int num : a) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
        }
        for (int num : b) {
            if (freqMap.getOrDefault(num, 0) > 0) {
                freqMap.put(num, freqMap.get(num) - 1); 
            } else {
                return false;
            }
        }
        return true;
    }
}