88. Merge Sorted Array

Title:
You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.


Constraints:

nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-109 <= nums1[i], nums2[j] <= 109


Solution:

import java.util.Scanner;

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = m - 1;      
        int j = n - 1;      
        int k = m + n - 1;  

        while (i >= 0 && j >= 0) {
            if (nums1[i] > nums2[j]) {
                nums1[k--] = nums1[i--];
            } else {
                nums1[k--] = nums2[j--];
            }
        }

        while (j >= 0) {
            nums1[k--] = nums2[j--];
        }

        for (int num : nums1) {
            System.out.print(num + " ");
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int m = sc.nextInt();
        int n = sc.nextInt();

        int nums1[] = new int[m + n]; 
        int nums2[] = new int[n];

        for (int i = 0; i < m; i++) {
            nums1[i] = sc.nextInt();
        }

        for (int i = 0; i < n; i++) {
            nums2[i] = sc.nextInt();
        }

        Solution ob = new Solution();
        ob.merge(nums1, m, nums2, n);

    }
}


Output:

Input
nums1 =[1,2,3,0,0,0]
m =3
nums2 =[2,5,6]
n =3
Merged array:
1 2 2 3 5 6 
Output
[1,2,2,3,5,6]
Expected
[1,2,2,3,5,6]

Explanation:
- i starts at the last element of the valid data in nums1 (m - 1).
- j starts at the last element of nums2 (n - 1).
- k starts at the last position in nums1 (m + n - 1).
- If nums1[i] is larger, decrement i and place nums1[i] (Larger Element) at nums1[k].
- Otherwise, decrement j and place nums2[j] (Larger Element) at nums1[k].
- Compare elements from the back of both arrays and place the larger one at the kth position in nums1.
- If nums2 still has remaining elements (when j >= 0), copy them into nums1.
This is necessary because nums2 might have smaller elements that werenâ€™t processed yet.
- If nums1 still has remaining elements, they are already in place, so no additional action is needed.