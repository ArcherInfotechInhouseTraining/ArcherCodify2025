122. Best Time to Buy and Sell Stock II

You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.

 

Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.

Example 2:
Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Total profit is 4.

Example 3:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.

Solution:

public class StockProfit {
    public static int maxProfit(int[] prices) {
        int profit = 0; // Variable to store the total profit
        
        // Loop through the array from the second day
        for (int i = 1; i < prices.length; i++) {
            // If the price today is greater than the price yesterday, calculate profit
            if (prices[i] > prices[i - 1]) {
                profit += prices[i] - prices[i - 1];
            }
        }
        
        return profit; // Return the total profit
    }
    
    public static void main(String[] args) {
        // Example 1
        int[] prices1 = {7, 1, 5, 3, 6, 4};
        System.out.println("Maximum Profit (Example 1): " + maxProfit(prices1)); // Output: 7

        // Example 2
        int[] prices2 = {1, 2, 3, 4, 5};
        System.out.println("Maximum Profit (Example 2): " + maxProfit(prices2)); // Output: 4

        // Example 3
        int[] prices3 = {7, 6, 4, 3, 1};
        System.out.println("Maximum Profit (Example 3): " + maxProfit(prices3)); // Output: 0
    }
}

output:

Input 
prices = [7,1,5,3,6,4]
Output 7
Expected 7

Explanation:

The method maxProfit accepts an array prices where prices[i] represents the stock price on the ith day.

Loop through the array starting from the second day.
If the price on day i is greater than the price on day i - 1, calculate the difference (prices[i] - prices[i - 1]) and add it to the profit.

  for (int i = 1; i < prices.length; i++) {
        if (prices[i] > prices[i - 1]) {
            profit += prices[i] - prices[i - 1];
        }
    }
The loop starts from the second day (i = 1) because we compare the current day’s price (prices[i]) with the previous day’s price (prices[i - 1]).

Condition:

java
Copy code
if (prices[i] > prices[i - 1])
If the stock price increases from the previous day, you buy the stock on the previous day and sell it on the current day to make a profit.
The profit from this transaction is added to the cumulative profit:
java
Copy code
profit += prices[i] - prices[i - 1];
If the stock price doesn’t increase:

No transaction is made because buying and selling would result in no profit or a loss.
3. Returning the Total Profit
java
Copy code
    return profit; // Return the total profit
}
After the loop finishes, the total profit accumulated is returned.

4. Main Method
java
Copy code
public static void main(String[] args) {
    int[] prices1 = {7, 1, 5, 3, 6, 4};
    System.out.println("Maximum Profit (Example 1): " + maxProfit(prices1)); // Output: 7
}
The main method contains test cases to demonstrate how the maxProfit method works.

Input Examples:

prices1 = {7, 1, 5, 3, 6, 4}:
Buy at price 1 (day 2) and sell at price 5 (day 3): Profit = 4.
Buy at price 3 (day 4) and sell at price 6 (day 5): Profit = 3.
Total profit = 4 + 3 = 7.
prices2 = {1, 2, 3, 4, 5}:
Buy at price 1 (day 1) and sell at price 5 (day 5): Profit = 4.
prices3 = {7, 6, 4, 3, 1}:
Prices are always decreasing, so no transactions are made. Profit = 0.

prices = [7, 1, 5, 3, 6, 4]
Day 2: Price drops from 7 to 1 → No profit, do nothing.
Day 3: Price rises from 1 to 5 → Buy at 1, sell at 5 → Profit = 5 - 1 = 4.
Day 4: Price drops from 5 to 3 → No profit, do nothing.
Day 5: Price rises from 3 to 6 → Buy at 3, sell at 6 → Profit = 6 - 3 = 3.
Day 6: Price drops from 6 to 4 → No profit, do nothing.
Total Profit = 4 + 3 = 7.

Example 3:
java
Copy code
prices = [7, 6, 4, 3, 1]
Prices are always decreasing, so no profitable transactions are possible.
Total Profit = 0.




 