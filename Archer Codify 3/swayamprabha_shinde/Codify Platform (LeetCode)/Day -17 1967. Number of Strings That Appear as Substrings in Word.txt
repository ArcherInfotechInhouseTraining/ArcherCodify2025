1967. Number of Strings That Appear as Substrings in Word

Problem Statement:
Given an array of strings patterns and a string word, return the number of strings in patterns that exist as a substring in word.

A substring is a contiguous sequence of characters within a string. 

Example 1:
Input: patterns = ["a","abc","bc","d"], word = "abc"
Output: 3
Explanation:
- "a" appears as a substring in "abc".
- "abc" appears as a substring in "abc".
- "bc" appears as a substring in "abc".
- "d" does not appear as a substring in "abc".
3 of the strings in patterns appear as a substring in word.

Example 2:
Input: patterns = ["a","b","c"], word = "aaaaabbbbb"
Output: 2
Explanation:
- "a" appears as a substring in "aaaaabbbbb".
- "b" appears as a substring in "aaaaabbbbb".
- "c" does not appear as a substring in "aaaaabbbbb".
2 of the strings in patterns appear as a substring in word.

Example 3:
Input: patterns = ["a","a","a"], word = "ab"
Output: 3
Explanation: Each of the patterns appears as a substring in word "ab".

Constraints:
patterns[i] and word consist of lowercase English letters.

Solution:

class Solution {
    public static int numOfStrings(String[] patterns, String word) {
        int count = 0;

        for (String pattern : patterns) {
            if (isSubstring(word, pattern)) {
                count++;
            }
        }

        return count;
    }

    // Function to check if pattern is a substring of word
    public static boolean isSubstring(String word, String pattern) {
        int wordLength = word.length();
        int patternLength = pattern.length();

        // Check every possible starting position in word
        for (int i = 0; i <= wordLength - patternLength; i++) {
            int j;
            // Compare characters of word and pattern
            for (j = 0; j < patternLength; j++) {
                if (word.charAt(i + j) != pattern.charAt(j)) {
                    break;
                }
            }
            // If full pattern matches, return true
            if (j == patternLength) {
                return true;
            }
        }
        return false;
    }

    public static void main(String[] args) {
        String[] patterns1 = {"a", "abc", "bc", "d"};
        String word1 = "abc";
        System.out.println("Output: " + numOfStrings(patterns1, word1)); // Output: 3

        String[] patterns2 = {"a", "b", "c"};
        String word2 = "aaaaabbbbb";
        System.out.println("Output: " + numOfStrings(patterns2, word2)); // Output: 2

        String[] patterns3 = {"a", "a", "a"};
        String word3 = "ab";
        System.out.println("Output: " + numOfStrings(patterns3, word3)); // Output: 3
    }
}


Explanation:

countPatternsAsSubstrings Method
A loop iterates over each string (pattern) in the patterns array.
For each pattern, the method calls isSubstring(word, pattern) to check if pattern is a substring of word.
If isSubstring returns true, the counter (count) is incremented.
Finally, the method returns the total count.

isSubstring Method
Calculate the lengths of word (wordLength) and pattern (patternLength).
Loop through all possible starting positions (i) in word where the pattern can fit:
The loop runs until i <= wordLength - patternLength to avoid exceeding the bounds of word.
For each starting position (i):
Compare the characters of pattern with the corresponding characters in word using another loop.
If all characters match, the method returns true.
If thereâ€™s a mismatch, the inner loop breaks, and the outer loop tries the next starting position.
If no match is found, the method returns false

Outer loop: Iterates through all possible starting positions in word
Inner loop: Compares characters 
