136. Single Number(leetcode)

Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:
Input: nums = [2,2,1]
Output: 1

Example 2:
Input: nums = [4,1,2,1,2]
Output: 4

Example 3:
Input: nums = [1]
Output: 1
 

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.

solution :


class Solution {
    public int singleNumber(int[] nums) {

         int result = 0;
        for(int num : nums ){

            result^=num;
        }
        return result;
    }

    public static void main(String args[])
    {
        int num[] = {2,2,1};

    }
}

Explanation :

- a ^ a = 0 (XORing a number with itself results in 0).
- a ^ 0 = a (XORing a number with 0 results in the number itself).
- Initialize result to 0.
- XOR all elements in the array. Numbers that appear twice will cancel each other out (num ^ num = 0),          leaving only the number that appears once.
