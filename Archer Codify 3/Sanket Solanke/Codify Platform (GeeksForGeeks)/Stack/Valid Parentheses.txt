*Title:*
Valid Parentheses

*Description: *
You are given a string s consisting of the following characters: '(', ')', '{', '}', '[' and ']'.
The input string s is valid if and only if:
Every open bracket is closed by the same type of close bracket.
Open brackets are closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
Return true if s is a valid string, and false otherwise.

Example 1:

Input: s = "[]"
Output: true

*Link:*
https://neetcode.io/problems/validate-parentheses

*Solution:*
class Solution {
    public boolean isValid(String s) {
    StringBuilder sb = new StringBuilder(s);
    Stack<Character> stack = new Stack<>();
    for (char ch : s.toCharArray()) 
    {
        if (ch == '(' || ch == '{' || ch == '[') 
        {
            stack.push(ch);
        } 
        else 
        {
            if (stack.isEmpty()) return false;
            char top = stack.pop();
            if ((ch == ')' && top != '(') || (ch == '}' && top != '{') || (ch == ']' && top != '[')) 
            {
                return false;
            }
            }
        }
        return stack.isEmpty();
    
    }
}


*Test Cases:*
Input: s = "[(])"
Output: false