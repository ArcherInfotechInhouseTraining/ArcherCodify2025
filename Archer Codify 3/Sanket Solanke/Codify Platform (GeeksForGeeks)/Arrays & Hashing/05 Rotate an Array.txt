*Title:*
Given an array arr[]. Rotate the array to the left (counter-clockwise direction) by d steps, where d is a positive integer. Do the mentioned change in the array in place.

Note: Consider the array as circular.

Examples :

Input: arr[] = [1, 2, 3, 4, 5], d = 2
Output: [3, 4, 5, 1, 2]
Explanation: when rotated by 2 elements, it becomes 3 4 5 1 2.

*Link:*
https://www.geeksforgeeks.org/batch/gfg-160-problems/track/arrays-gfg-160/problem/rotate-array-by-n-elements-1587115621

*Solution:*

class Solution {
    // Function to rotate an array by d elements in counter-clockwise direction.
    static void rotateArr(int arr[], int d) {
        int l = arr.length;
        int tmp[]=new int[l];
        d = d%l;
        for(int i=d; i<l; i++)
        {
            tmp[i-d]=arr[i];
        }
        for(int i=0;i<d;i++)
        {
            tmp[l-d+i]=arr[i];
        }
        for(int i=0; i<l;i++)
        {
            arr[i]=tmp[i];
        }
        
    }
}
*Test Cases:*
For Input: 
1 2 3 4 5
2
Your Output: 
3 4 5 1 2
Expected Output: 
3 4 5 1 2

*Algo used:*
1. we have to handle larger values for d using mod. (d = d%l;)
2. Stored array elements into tmp array from dth position till length of original array.
3. Stored the remaining array elements to tmp array one by one.
4. Copy tmp array to original array as array should be in place.
