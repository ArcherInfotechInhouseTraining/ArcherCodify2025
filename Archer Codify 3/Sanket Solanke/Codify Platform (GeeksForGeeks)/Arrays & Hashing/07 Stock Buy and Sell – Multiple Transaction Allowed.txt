Title:
The cost of stock on each day is given in an array price[]. Each day you may decide to either buy or sell the stock i at price[i], you can even buy and sell the stock on the same day. Find the maximum profit that you can get.

Note: A stock can only be sold if it has been bought previously and multiple stocks cannot be held on any given day.

Example:
Input: prices[] = [100, 180, 260, 310, 40, 535, 695]
Output: 865
Explanation: Buy the stock on day 0 and sell it on day 3 => 310 – 100 = 210. Buy the stock on day 4 and sell it on day 6 => 695 – 40 = 655. Maximum Profit = 210 + 655 = 865.

Link:
https://www.geeksforgeeks.org/batch/gfg-160-problems/track/arrays-gfg-160/problem/stock-buy-and-sell2615

Solution:

// User function Template for Java
class Solution {
    public int maximumProfit(int prices[]) {
        int len = prices.length;
        int lmin=0; //local minima
        int lmax=0; //local mixima
        int profit=0;
        
        int i=0;
        while(i < len-1)
        {
            while(i < len-1 && prices[i] >= prices[i+1])
            {
                i++;
            }
            lmin=prices[i];
            while(i < len-1 && prices[i] <= prices[i+1])
            {
                i++;
            }
            lmax = prices[i];
            profit += lmax - lmin;
        }
        return profit;
        
    }
}

Test Cases:
For Input: 
100 180 260 310 40 535 695
Your Output: 
865
Expected Output: 
865

Algo:
Use local minima and local maxima.
1. set lmin, lmax and profit to 0.
2. use loop to iterate through prices array.
3. use nested loop to find lmin. Set immidiate minimum price as lmin.
5. use loop to find lmax. set local max price to lmax.
6. calculate profit(lmax-lmin).
7. go to setp 2.
8. return profit.