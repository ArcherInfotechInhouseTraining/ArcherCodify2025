Problem statement:
Given an array of strings arr[]. Return the longest common prefix among each and every strings present in the array. If there's no prefix common in all the strings, return "".

Examples :

Input: arr[] = ["geeksforgeeks", "geeks", "geek", "geezer"]
Output: "gee"
Explanation: "gee" is the longest common prefix in all the given strings.

Input: arr[] = ["hello", "world"]
Output: ""
Explanation: There's no common prefix in the given strings.

Constraints:
1 ≤ |arr| ≤ 103
1 ≤ |arr[i]| ≤ 103

Solution:
#include <bits/stdc++.h>
using namespace std;
class Solution {
  public:
    string longestCommonPrefix(vector<string> arr) {
         if(arr.empty()){
            return "";
        }
        sort(arr.begin(),arr.end());
        string first=arr[0];
        int n=arr.size();
        string last=arr[n-1];
        int count=0;
        while(count<first.size() && first[count]==last[count]){
            count++;
        }
        string ans=first.substr(0,count);
        return ans;
    }
};
int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        vector<string> arr;
        string input;
        getline(cin, input);
        stringstream ss(input);
        string number;
        while (ss >> number) {
            arr.push_back(number);
        }

        Solution ob;
        string ans = ob.longestCommonPrefix(arr);
        if (ans.empty())
            cout << "\"\"";
        else
            cout << ans;
        cout << endl;
    }
}

