Problem statement:
You are given a string s representing an expression containing various types of brackets: {}, (), and []. Your task is to determine whether the brackets in the expression are balanced. A balanced expression is one where every opening bracket has a corresponding closing bracket in the correct order.

Examples :

Input: s = "{([])}"
Output: true
Explanation: 
-In this expression, every opening bracket has a corresponding closing bracket.
-The first bracket { is closed by }, the second opening bracket ( is closed by ), and the third opening bracket [ is closed by ].
- As all brackets are properly paired and closed in the correct order, the expression is considered balanced.

Input: s = "()"
Output: true
Explanation: 
- This expression contains only one type of bracket, the parentheses ( and ).
- The opening bracket ( is matched with its corresponding closing bracket ).
- Since they form a complete pair, the expression is balanced.

Input: s = "([]"
Output: false
Explanation: 
- This expression contains only one type of bracket, the parentheses ( and ).
- The opening bracket ( is matched with its corresponding closing bracket ).
- Since they form a complete pair, the expression is balanced.
Constraints:
1 ≤ s.size() ≤ 106
s[i] ∈ {'{', '}', '(', ')', '[', ']'}


Solution:
#include <bits/stdc++.h>
using namespace std;
class Solution {
  public:
    bool isParenthesisBalanced(string& s) {
        stack<char> stack;

    for (char ch : s) {
        // Push opening brackets onto the stack
        if (ch == '(' || ch == '{' || ch == '[') 
        {
            stack.push(ch);
        } 
	
else if (ch == ')' || ch == '}' || ch == ']') 
        {
            // Check for a matching opening bracket
            if (stack.empty()) 
            {
                return false; // No matching opening bracket
            }

            char top = stack.top();
            stack.pop();

            // Ensure the brackets match
            if ((ch == ')' && top != '(') ||
                (ch == '}' && top != '{') ||
                (ch == ']' && top != '['))
                {
                     return false;
              }
        }
    
    }

    // Ensure no unmatched opening brackets remain
    return stack.empty();
    }
};



int main() {
    int t;
    string a;
    cin >> t;
    while (t--) {
        cin >> a;
        Solution obj;
        if (obj.isParenthesisBalanced(a))
            cout << "true" << endl;
        else
            cout << "false" << endl;

        cout << "~"
             << "\n";
    }
}

Output:
For Input: 
{([])}
Your Output: 
true
Expected Output: 
true
