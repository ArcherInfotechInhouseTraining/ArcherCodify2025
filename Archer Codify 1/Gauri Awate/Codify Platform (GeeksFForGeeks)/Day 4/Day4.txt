Problem statement:
Given an array arr[] containing only non-negative integers, your task is to find a continuous subarray (a contiguous sequence of elements) whose sum equals a specified value target. You need to return the 1-based indices of the leftmost and rightmost elements of this subarray. You need to find the first subarray whose sum is equal to the target.

Note: If no such array is possible then, return [-1].

Examples:

Input: arr[] = [1, 2, 3, 7, 5], target = 12
Output: [2, 4]
Explanation: The sum of elements from 2nd to 4th position is 12.

Input: arr[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 15
Output: [1, 5]
Explanation: The sum of elements from 1st to 5th position is 15.

Input: arr[] = [5, 3, 4], target = 2
Output: [-1]
Explanation: There is no subarray with sum 2.

Constraints:
1 <= arr.size()<= 106
0 <= arr[i] <= 103
0 <= target <= 109

Solution:
#include <bits/stdc++.h>
using namespace std;
class Solution {
  public:
    vector<int> subarraySum(vector<int> &arr, int target) {
         vector<int> result{-1};
	for(int i = 0; i < arr.size() - 1; i++)
        {
            if (arr[i] == target)
                return vector<int> {i + 1, i + 1};        
            if(arr[i] < target)
            {
                int j = i + 1;
                int temp = arr[i] + arr[j];
                while( temp < target && ++j < arr.size() )
                {
                    temp += arr[j];
                }
                if( temp == target)
                {
                    result[0] = i+1;
                    result.push_back( j+1 );
                    break;
                }
            }
        }
        if(arr.back() == target)
            return vector<int> {arr.size(), arr.size()};
        return result;
    }
};
int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        vector<int> arr;
        int d;
        string input;

        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }

        cin >> d;
        cin.ignore();

        Solution ob;
        vector<int> result = ob.subarraySum(arr, d);
        for (int i : result) {
            cout << i << " ";
        }
        cout << "\n~\n";
    }
    return 0;
}


Output:
For Input: 
1 2 3 7 5
12
Your Output: 
2 4
Expected Output: 
2 4
