Problem statement:
Given an array arr of integers and an index key(0-based index). Your task is to return the element present at the index key in the array.

Examples:

Input: key = 2 , arr = [10, 20, 30, 40, 50]
Output: 30
Explanation: The value of arr[2] is 30 .
Input: key = 4 , arr = [10, 20, 30, 40, 50, 60, 70]
Output: 50
Explanation: The value of the arr[4] is 50 .
Expected Time Complexity: O(1)
Expected Auxiliary Space: O(1)

Constraints:
0 ≤ key ≤ arr.size - 1
1 ≤ arr.size ≤ 106
1 ≤ arr[i] ≤ 109

Solution:
//Approach used:Linear Search
// Initial template for C++
#include <bits/stdc++.h>
using namespace std;
class Solution {
  public:
    int findElementAtIndex(int key, vector<int> &arr) {
        // code here
        int i;
        for(i=0;i<arr.size();i++){
            if(i==key)//Comparing the key with the index if match found return the element 
                          present at that position
            {
                return arr[i];
            }
        }
        
    }
    
};
int main() {
    int t;
    cin >> t;
    cin.ignore(); // Ignore the newline character after t
    while (t--) {
        vector<int> arr;
        int key;
        cin >> key;
        cin.ignore();
        string input;

        getline(cin, input); // Read the entire line for the array elements
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }
        Solution obj;
        int res = obj.findElementAtIndex(key, arr);

        cout << res << endl;

        cout << "~"<< "\n";
    }
}


Output:
For Input: 
5
1 1 2 2 3 4 5 5 6 7
Your Output: 
4
Expected Output: 
4