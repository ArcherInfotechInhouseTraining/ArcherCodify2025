Problem statement:
Given an array arr. Find the majority element in the array. If no majority exists, return -1.

A majority element in an array is an element that appears strictly more than arr.size()/2 times in the array.

Examples:

Input: arr[] = [3, 1, 3, 3, 2]
Output: 3
Explanation: Since, 3 is present more than n/2 times, so it is the majority element.

Input: arr[] = [7]
Output: 7
Explanation: Since, 7 is single element and present more than n/2 times, so it is the majority element.

Input: arr[] = [2, 13]
Output: -1
Explanation: Since, no element is present more than n/2 times, so there is no majority element.
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ arr.size() ≤ 105
0 ≤ arr[i]≤ 105
Solution:
#include <bits/stdc++.h>
using namespace std;
class Solution {
  public:
    int majorityElement(vector<int>& arr) {
        int n=arr.size();
        int i,cnt=0;
        int element;
        for(i=0;i<n;i++)
        {
            if(cnt==0)
            {
                cnt=1;
                element=arr[i];
            }
            else if(arr[i]==element)
            {
                cnt++;
            }
            else{
                cnt--;
            }
        }
        int cnt1=0;
        for(int i=0;i<n;i++)
        {
            if(arr[i]==element)
            {
                cnt1++;
            }
            
        }
           if(cnt1>n/2)
           {
                return element;
            }
        return -1; 
    }
};
int main() {

    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        int n;
        vector<int> a, b;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int num;
        while (ss >> num)
            a.push_back(num);

        Solution obj;
        cout << obj.majorityElement(a) << endl;
    }

    return 0;
}