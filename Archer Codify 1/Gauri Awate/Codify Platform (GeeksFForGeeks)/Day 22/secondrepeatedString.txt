Problem:
Given a sequence of strings, the task is to find out the second most repeated (or frequent) string in the given sequence.

Note: No two strings are the second most repeated, there will be always a single string.

Example 1:

Input:
N = 6
arr[] = {aaa, bbb, ccc, bbb, aaa, aaa}
Output: bbb
Explanation: "bbb" is the second most 
occurring string with frequency 2.

Example 2:

Input: 
N = 6
arr[] = {geek, for, geek, for, geek, aaa}
Output: for
Explanation: "for" is the second most
occurring string with frequency 2.

Your Task:
You don't need to read input or print anything. Your task is to complete the function secFrequent() which takes the string array arr[] and its size N as inputs and returns the second most frequent string in the array. If no such string exists, then return an empty string.


Expected Time Complexity: O(N*max(|Si|).
Expected Auxiliary Space: O(N*max(|Si|).


Constraints:
1<=N<=103


Solution:
#include<bits/stdc++.h>
using namespace std;
class Solution
{
  public:
    string secFrequent (string arr[], int n)
    {
           string uniqueStrings[n];
    int frequency[n] = {0};
    int uniqueCount = 0;

        for (int i = 0; i < n; i++) {
        bool found = false;
        for (int j = 0; j < uniqueCount; j++) {
            if (arr[i] == uniqueStrings[j]) {
                frequency[j]++;
                found = true;
                break;
            }
        }
        if (!found) {
            uniqueStrings[uniqueCount] = arr[i];
            frequency[uniqueCount]++;
            uniqueCount++;
        }
    }

       int maxFreq = 0, secondMaxFreq = 0;
    string mostFrequent, secondMostFrequent;

    for (int i = 0; i < uniqueCount; i++) {
        if (frequency[i] > maxFreq) {
            secondMaxFreq = maxFreq;
            secondMostFrequent = mostFrequent;

            maxFreq = frequency[i];
            mostFrequent = uniqueStrings[i];
        } else if (frequency[i] > secondMaxFreq) {
            secondMaxFreq = frequency[i];
            secondMostFrequent = uniqueStrings[i];
        }
    }

    return secondMostFrequent;
    }
};
int main()
{
    int t; cin >> t;
    while (t--)
    {
        int n; cin >> n;
        string arr[n];
        for (int i = 0; i < n; ++i)
            cin >> arr[i];
        Solution ob;
        cout << ob.secFrequent (arr, n) << endl;
    
cout << "~" << "\n";
}
}
