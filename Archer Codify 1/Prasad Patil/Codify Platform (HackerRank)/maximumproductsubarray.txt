Problem statement:
Given an array arr[] that contains positive and negative integers (may contain 0 as well). Find the maximum product that we can get in a subarray of arr[].

Note: It is guaranteed that the output fits in a 32-bit integer.

Examples

Input: arr[] = [-2, 6, -3, -10, 0, 2]
Output: 180
Explanation: The subarray with maximum product is {6, -3, -10} with product = 6 * (-3) * (-10) = 180.

Input: arr[] = [-1, -3, -10, 0, 6]
Output: 30
Explanation: The subarray with maximum product is {-3, -10} with product = (-3) * (-10) = 30.

Input: arr[] = [2, 3, 4] 
Output: 24 
Explanation: For an array with all positive elements, the result is product of all elements. 

Constraints:
1 ≤ arr.size() ≤ 106
-10  ≤  arr[i]  ≤  10

Solution:
#include <bits/stdc++.h>
using namespace std;
class Solution {
  public:
    // Function to find maximum product subarray
    int maxProduct(vector<int> &arr) 
    {
        int n = arr.size();
        int maxproduct = INT_MIN; 
        int product = 1;   
        //from left to right
        for (int i = 0; i < n; i++)
        {
            product *= arr[i];
            maxproduct = max(maxproduct, product);
            if (arr[i] == 0) product = 1; 
        }
        //reverse traversal
        product = 1; 
        for (int i = n - 1; i >= 0; i--)
        {
            product *= arr[i];
            maxproduct = max(maxproduct, product);
            if (arr[i] == 0) product = 1; 
        }
        
        return maxproduct;
    }
};
int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        // int n, i;
        // cin >> n;
        // vector<int> arr(n);
        // for (i = 0; i < n; i++) {
        //     cin >> arr[i];
        // }

        vector<int> arr;
        string input;

        // Read array
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }
        Solution ob;
        auto ans = ob.maxProduct(arr);
        cout << ans << "\n";

        cout << "~"
             << "\n";
    }
    return 0;
}
