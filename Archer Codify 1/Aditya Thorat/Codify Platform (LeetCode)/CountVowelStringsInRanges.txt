Problem: https://leetcode.com/problems/count-vowel-strings-in-ranges/?envType=daily-question&envId=2025-01-02

/*
You are given a 0-indexed array of strings words and a 2D array of integers queries.

Each query queries[i] = [li, ri] asks us to find the number of strings present in the range li to ri (both inclusive) of words that start and end with a vowel.

Return an array ans of size queries.length, where ans[i] is the answer to the ith query.

Note that the vowel letters are 'a', 'e', 'i', 'o', and 'u'.

 

Example 1:

Input: words = ["aba","bcb","ece","aa","e"], queries = [[0,2],[1,4],[1,1]]
Output: [2,3,0]
Explanation: The strings starting and ending with a vowel are "aba", "ece", "aa" and "e".
The answer to the query [0,2] is 2 (strings "aba" and "ece").
to query [1,4] is 3 (strings "ece", "aa", "e").
to query [1,1] is 0.
We return [2,3,0].
Example 2:

Input: words = ["a","e","i"], queries = [[0,2],[0,1],[2,2]]
Output: [3,2,1]
Explanation: Every string satisfies the conditions, so we return [3,2,1].
 

Constraints:

1 <= words.length <= 105
1 <= words[i].length <= 40
words[i] consists only of lowercase English letters.
sum(words[i].length) <= 3 * 105
1 <= queries.length <= 105
0 <= li <= ri < words.length
*/




Solution 1: Exceeds time Limit
int* vowelStrings(char** words, int wordsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {
    int* ret;
    int i, j, c, cnt;
    *returnSize= queriesSize;
    ret= (int*)malloc(sizeof(int)*returnSize);
    for(i=0; i<queriesSize; i++)
    {
        for(cnt=0, j=queries[i][0]; j<=queries[i][1]; j++)
        {
            if(j>wordsSize)
                return ret;
            if(words[j][0]=='a' || words[j][0]=='A' || words[j][0]=='e' || words[j][0]=='E' || words[j][0]=='i' || words[j][0]=='I' ||words[j][0]=='o' ||words[j][0]=='O' ||words[j][0]=='u' ||words[j][0]=='U')
            {
                if(words[j][c]=='a' || words[j][c]=='A' || words[j][c]=='e' || words[j][c]=='E' || words[j][c]=='i' || words[j][c]=='I' ||words[j][c]=='o' ||words[j][c]=='O' ||words[j][c]=='u' ||words[j][c]=='U')
                    cnt++;
            }
        }
        ret[i]= cnt;
    }    

    return ret;
}

Solution 2:

int isVowel(char c) {
    c = tolower(c);
    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';
}

int* vowelStrings(char** words, int wordsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {
    int* ret, i;
    int* counts;
    *returnSize= queriesSize;
    counts= (int*)calloc(wordsSize+1,sizeof(int));
    ret= (int*)malloc(sizeof(int)*queriesSize);
    for(i=0; i<wordsSize; i++)
        counts[i+1]= counts[i]+ (isVowel(words[i][0]) && isVowel(words[i][strlen(words[i]) - 1]));
    
    for(i=0; i<queriesSize; i++)
        ret[i]= counts[queries[i][1]+1]-counts[queries[i][0]];
    return ret;
}

Java Alternative: 

void public vowelStrings(int[] result, String[] words, int[][] queries) 
{
	int[] counts= new int[words.length()+1];
	result= new int[queries.length()];
	for(int i; i< words.length(); i++)
	{
		counts[i+1]= counts[i] + (isVowel(words[i][0]) && isVowel(words[i][words[i].length() -1]));
	}
	for(i=0; i<queriesSize; i++)
        	result[i]= counts[queries[i][1]+1]-counts[queries[i][0]];
}












	vowelStrings
|===================
|
|	result-------------------
|				|
|	result=[1,2,3];		|
|				|
|----------------		|
				|
				|
				|
				|
				|
	Main			|
|--------------			|
|				|
|				V
|	result-------------> |1, 2, 3|
|
|-------------






















