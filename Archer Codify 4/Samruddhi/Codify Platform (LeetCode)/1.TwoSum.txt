Problem Statement:

1. Two Sum:
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

----------------------------------------------------------------------------------------------------------------- 

Test Cases:

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]
 
----------------------------------------------------------------------------------------------------------------- 

Code:

class Solution {

    public int[] twoSum(int[] nums, int target) {
        
        for(int i=0; i<nums.length; i++)
        {
            for(int j=i+1; j<nums.length;j++)
            {
                if(nums[i]+nums[j]==target)
                {
                    return new int[]{i,j};
                }
            }
        }
        return new int[]{};
    }
}

----------------------------------------------------------------------------------------------------------------- 
Explanation:

1. public int[] twoSum(int[] nums, int target) 

public: Makes the method accessible from anywhere.
int[]: Specifies that the method returns an array of integers.
twoSum: The name of the method, as required by the problem.
int[] nums: The input array of integers.
int target: The target integer we need to find the sum for.



2. for (int i = 0; i < nums.length; i++) 
This for loop starts from the first element of the array (i = 0) and iterates through each element (i < nums.length).
nums.length is the total number of elements in the array.


3. for (int j = i + 1; j < nums.length; j++) 
A nested for loop starts from the next element after i (j = i + 1).
This ensures we do not use the same element twice and only check pairs once.
It continues until the end of the array (j < nums.length).

4.if (nums[i] + nums[j] == target) 
Check if the sum of the two numbers equals the target
Adds the element at index i (nums[i]) and the element at index j (nums[j]).
Compares their sum to the target. If the sum equals the target, it proceeds to the next step.


5. return new int[] {i, j};
Return their indices.
If the condition nums[i] + nums[j] == target is true, the indices i and j are returned in an array (new int[] {i, j}).
This is the solution to the problem.



Example Walkthrough:
Input:

nums = [2, 7, 11, 15], target = 9
Outer Loop: Starts with i = 0 (nums[i] = 2).
Inner Loop: Starts with j = 1 (nums[j] = 7).
Check: nums[i] + nums[j] = 2 + 7 = 9, which matches the target.
Return: Indices [0, 1] are returned as the solution.
                    
     