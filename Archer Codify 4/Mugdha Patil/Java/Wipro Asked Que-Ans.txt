For each element in an array, find the previous greater element to the left.
For the array [10, 4, 2, 20, 40, 12, 30], the previous greater elements are:
10 → None
4 → 10
2 → 4
20 → None
40 → None
12 → 40
30 → 40

Code:
#include<stdio.h>
int main()
{
    int i,n=7,flag,j;
    int arr[7]={10,4,2,20,40,12,30};
    
    for(i=0;i<n;i++)
    {
        flag=0;
        for(j=i-1;j>=0;j--)
        {
            if(arr[j]>arr[i])
            {
                printf("%d--->%d\n",arr[i],arr[j]);
                flag=1;// left side element is greater(max)
                break;
            }
        }
        if(!flag)
        {
            printf("%d--->None\n",arr[i]);
        }
    }
    return 0;
}

________________________________________________________________________________________________________________________________________________
Given a rotated sorted array, find if there exists a pair whose sum equals the target.
Input: Array [11, 15, 6, 8, 9, 10], Target 16.
Output: True (pair [6, 10] exists).

Code:
#include<stdio.h>

int main()
{

    int i,j,target=16;
    int arr[6]={11,15,6,8,9,10};
    int n=6;
    for (i=0;i<n;i++) 
    {
        for (j=i+1;j<n;j++) 
        {
            if (arr[i] + arr[j]==target) 
            {
                printf("True (Pair: [%d, %d])\n", arr[i], arr[j]);
                return 0;
            }
        }
        
    }
    printf("False\n");
    return 0;
}
________________________________________________________________________________________________________________________________________________

The ultimate ninja Ankush was bored so his friend ninja Nikhil gave him a number and asked the ultimate ninja to tell if the number is a “CUBE FREE NUMBER” or not? And if it is then tell its position
A cube-free number is a number whose none of the divisors is a cube number (A cube number is a cube of an integer like 8 (2 * 2 * 2) , 27 (3 * 3 * 3) ). So cube free numbers are 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 18 etc (we will consider 1 as cube free). 8, 16, 24, 27, 32, etc are not cube-free numbers. So the position of 1 among the cube-free numbers is 1, the position of 2 is 2, 3 is 3, and the position of 10 is 9.

More formally, given a positive number you have to say if it's a cube-free number and if yes then tell its position among cube-free numbers, else return -1.

For example

Given:
‘N’ = 4, Yes 4 is a cube-free number since it's only divisor 2 is not a cube of any number and the position of 4 is 4 itself as a cube free number.
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= ‘T’ <= 10
1 <= ‘N’ <= 10 ^ 5

Time Limit: 1sec.
Sample Input 1 :
2
4
8
Sample Output 1 :
4
-1  
Explanation of the Sample Input 1:
In the first test case, Yes 4 is a cube-free number since its only divisor 2 is not a cube of any number and the position of 4 is 4 itself as a cube-free number.

In the second test case, Since one of the divisors of 8 is 8 itself which is 2 * 2 * 2, i.e., a cube of 2 hence 8 is not a cube-free number.
Sample Input 2 :
2
9
10
Sample Output 2 :
8
9


#include<stdio.h>
#include<math.h>
int main()
{
  int cnt,i,j,pos=1,cf;
  scanf("%d",&cnt);
  
  int arr[cnt];
  
    for(i=0;i<cnt;i++)
    {
        scanf("%d", &arr[i]);
    }
    for(i=0;i<cnt;i++)
    {
        int no= arr[j];
        cf = 1;
        j++;
        for(j=2;j<=cbrt(arr[i]);j++)
        {    
            if(arr[i]%j*j*j==0)
            {
                cf=0;
                break;
               
            }
        }
        if(cf)
        {
            printf("Number: %d \t Position: %d\n", arr[i], pos);
            pos++;
        }
        else
        {
            printf("Number: %d \t Position: -1\n", arr[i]);
        }
    }
    return 0;    
}

________________________________________________________________________________________________________________________________________________
In a party, Ninja was playing with his cousins to solve an alphabet pattern problem given by their uncle. However, even after taking several hours, the cousins could not solve the problem.
A value of ‘N’ is given to them, and they are asked to solve the problem. Since they are stuck for a while, they ask you to solve the problem. Can you help solve this problem?

Example : 
Pattern for N = 3
A
BB
CCC
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= T <= 50
1 <= N <= 26

Time Limit: 1 sec
Sample Input 1:
2
3
2
Sample Output 1:
A
BB
CCC

A
BB
Explanation for Sample Input 1:
 In the first test case, the value of ‘N’ is 3, so print the three rows from 1 to ‘3’ where each row print the ith Alphabet ‘i’ times where ‘i’ ranges from 1 to 3. Hence the answer is [“A”,”BB”,”CCC”].

 In the second test case, value of ‘N’ is 2, so print the two rows from 1 to 2 where each row print the ith Alphabet ‘i’ times where ‘i’ ranges from 1 to 2. Hence the answer is [“A”,”BB”].
Sample Input 2:

2
4
5
Sample Output 2:
A
BB  
CCC
DDDD

A
BB
CCC
DDDD
EEEEE

Code:
#include<stdio.h>
int main()
{
    int T,N,i,j;
    char ch;
    //printf("Enter Number of test cases and Rows ");
    scanf("%d",&T);
    while(T--)
    {
        scanf("%d",&N);
        for(i=1;i<=N;i++)
        {
            ch='A'+i-1;
            for(j=1;j<=i;j++)
            {
                printf("%c",ch);
            }
            printf("\n");
        }
        if(T>0)
        {
            printf("\n");
        }
    }
    return 0;
}
________________________________________________________________________________________________________________________________________________

Two strings,  and , are called anagrams if they contain all the same characters in the same frequencies. For this challenge, the test is not case-sensitive. For example, the anagrams of CAT are CAT, ACT, tac, TCA, aTC, and CtA.

Function Description

Complete the isAnagram function in the editor.

isAnagram has the following parameters:

string a: the first string
string b: the second string
Returns

boolean: If  and  are case-insensitive anagrams, return true. Otherwise, return false.
Input Format

The first line contains a string .
The second line contains a string .

Constraints

Strings  and  consist of English alphabetic characters.
The comparison should NOT be case sensitive.
Sample Input 0

anagram
margana
Sample Output 0

Anagrams
Explanation 0

Character	Frequency: anagram	Frequency: margana
A or a	3	3
G or g	1	1
N or n	1	1
M or m	1	1
R or r	1	1
The two strings contain all the same letters in the same frequencies, so we print "Anagrams".

Sample Input 1

anagramm
marganaa
Sample Output 1

Not Anagrams
Explanation 1

Character	Frequency: anagramm	Frequency: marganaa
A or a	3	4
G or g	1	1
N or n	1	1
M or m	2	1
R or r	1	1
The two strings don't contain the same number of a's and m's, so we print "Not Anagrams".

Sample Input 2

Hello
hello
Sample Output 2

Anagrams
Explanation 2

Character	Frequency: Hello	Frequency: hello
E or e	1	1
H or h	1	1
L or l	2	2
O or o	1	1
The two strings contain all the same letters in the same frequencies, so we print "Anagrams".

public class Solution {
    static boolean isAnagram(String a, String b) {
        String a=a.replaceAll("\\s","").toLowerCase(); 
        String b=b.replaceAll("\\s","").toLowerCase(); 
        
        if(a.length()!=b.length())
        {
          return false;
        }
        char charArrayA[]=a.toCharArray();
        char charArrayB[]=b.toCharArray();
        
        Arrays.sort(charArrayA);
        Arrays.sort(charArrayB);
        
        return Arrays.equals(charArrayA, charArrayB);
    }
    

    public static void main(String[] args) {
    
        Scanner scan = new Scanner(System.in);
        String a = scan.next();
        String b = scan.next();
        scan.close();
        boolean ret = isAnagram(a, b);
        System.out.println( (ret) ? "Anagrams" : "Not Anagrams" );
    }
}
