JAVA DATATYPES
_____________________________________________________________________________________________________________________
Input Format

The first line contains an integer, , denoting the number of test cases.
Each test case, , is comprised of a single line with an integer, , which can be arbitrarily large or small.
___________________________________________________________________________________________________________________
Output Format

For each input variable  and appropriate primitive , you must determine if the given primitives are capable of storing it. If yes, then print:

n can be fitted in:
* dataType
If there is more than one appropriate data type, print each one on its own line and order them by size (i.e.: ).

If the number cannot be stored in one of the four aforementioned primitives, print the line:

n can't be fitted anywhere.
_____________________________________________________________________________________________________________________
Sample Input

5
-150
150000
1500000000
213333333333333333333333333333333333
-100000000000000
_____________________________________________________________________________________________________________________
Sample Output

-150 can be fitted in:
* short
* int
* long
150000 can be fitted in:
* int
* long
1500000000 can be fitted in:
* int
* long
213333333333333333333333333333333333 can't be fitted anywhere.
-100000000000000 can be fitted in:
* long
_____________________________________________________________________________________________________________________
Code: 

import java.util.*;
import java.io.*;

class Solution{
    public static void main(String []argh)
    {

        Scanner sc = new Scanner(System.in);
        int t=sc.nextInt();

        for(int i=0;i<t;i++)
        {
            try
            {
                long x=sc.nextLong();
                System.out.println(x+" can be fitted in:");
               // if(x>=-128 && x<=127)System.out.println("* byte");
                //Complete the code

                if(x>=Byte.MIN_VALUE && x<=Byte.MAX_VALUE)
                    System.out.println("* byte");
                if(x>=Short.MIN_VALUE && x<=Short.MAX_VALUE)
                    System.out.println("* short");
                if(x>=Integer.MIN_VALUE && x<=Integer.MAX_VALUE)
                    System.out.println("* int");
                if(x>=Long.MIN_VALUE && x<=Long.MAX_VALUE)
                    System.out.println("* long");
            }
            catch(Exception e)
            {
                System.out.println(sc.next()+" can't be fitted anywhere.");
            }

        }
    }
}
_____________________________________________________________________________________________________________________
Explaination:

This program determines the smallest data types in Java 
that can store a given input value.

This program checks which data types in Java (like byte, short, int, or long) can hold a given number. It helps understand the range of each data type.

How It Works:

First, the program asks how many numbers (test cases) you want to check.
For each number, it determines if it fits in any of the four data types.
If the number fits, it prints the data types where it can be stored.
If the number is too big or invalid, it says the number can't fit anywhere.

Steps in the Program:

Input the Test Cases:
The program reads how many numbers you want to test.

Check Each Number:
For every number, the program does the following:
Reads the number.
Compares it to the range of each data type (byte, short, int, long).
Prints which data types can hold the number.

Handle Invalid Numbers:
If we enter something too large or invalid (e.g., letters instead of numbers), the program tells us it can't fit anywhere.


So using, MIN_VALUE and MAX_VALUE to check the smallest and largest numbers each data type can handle.
If the number is within a data type's range, it prints that data type.
Invalid inputs are handled without crashing the program.


Simply,
The program checks how “big” or “small” a number is and tells you where it can fit. If it’s too large, it just says it can’t fit anywhere.
