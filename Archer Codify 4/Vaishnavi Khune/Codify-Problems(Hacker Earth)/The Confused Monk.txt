Problem
The Monk wants to teach all its disciples a lesson about patience, since they are always in a hurry to do something crazy. To teach them this, he gives them a list of N numbers, which may or may not be distinct. The students are supposed to solve a simple Mathematical equation based on the array of these N numbers.

g(x) - GCD (a[ 0 ], a[ 1 ], a[ 2 ]... a[n-1] )
f(x) - (a[ 0 ] * a[ 1 ] * a[ 2 ]... * a[n-1] )
The value of the MonkQuotient is: 109 + 7.

The equation to be solved is: ( f(x)g(x) ) % MonkQuotient

Input constraints:
The first line of input will contain an integer — N. The next line will contain N integers denoting the elements of the list.

Output constraints:
Print the required answer of the equation.

Constraints:
1 ≤ N ≤ 50
1 ≤ Ai ≤ 103

Sample Input
2
2 6
Sample Output
144
Time Limit: 2
Memory Limit: 256
Source Limit:
Explanation
Here we can see that the product of the elements of array is 12 and the GCD of the array comes out to be 2 . Thus the answer would be 12^2 which is 144.


code:
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;

class Main {

     // Method to find GCD of two numbers
    public static long gcd(long a, long b) {
        return b == 0 ? a : gcd(b, a % b);
    }

    // Method to find GCD of an array
    public static long findGCDOfArray(long[] arr) {
        if (arr == null || arr.length == 0) return 0;
        long gcdResult = arr[0];
        for (int i = 1; i < arr.length; i++) {
            gcdResult = gcd(gcdResult, arr[i]);
            // If at any point the GCD becomes 1, we can break early
            if (gcdResult == 1) {
                return 1;
            }
        }
        return gcdResult;
    }

    public static long getProduct(long []arr, long m)
    {
        long ans=1;
        for(int i=0; i< arr.length;i++)
        {
            ans*=arr[i];
            ans = ans % m;
        }
        return ans;
    }

    public static long getPower(long a, long b, long m)
    {
        long ans=1;
        for(int i=0;i<b;i++)
        {
            ans=ans*a;
            ans = ans % m;
        }
        return ans;
    }

    public static void main(String args[] ) throws Exception {
        //BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        long m = 1000000007;
        int n = Integer.parseInt(br.readLine());
       
        String name = br.readLine();                // Reading input from STDIN
        String str[]=name.split(" ");

        long num[] = new long[n];
        for(int i=0; i<n ; i++)
        {
            num[i] = Long.parseLong(str[i]);
        }

        long gx = findGCDOfArray(num);
        long fx = getProduct(num,m);

      long result = getPower(fx,gx,m);
      
        System.out.println(result);    // Writing output to STDOUT
    }
}