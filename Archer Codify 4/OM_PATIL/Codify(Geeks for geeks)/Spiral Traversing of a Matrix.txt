You are given a rectangular matrix mat[][] of size n x m, and your task is to return an array while traversing the matrix in spiral form.

Examples:

Input: mat[][] = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
Output: [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]
Explanation: 

Input: mat[][] = [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18]]
Output: [1, 2, 3, 4, 5, 6, 12, 18, 17, 16, 15, 14, 13, 7, 8, 9, 10, 11]
Explanation: Applying same technique as shown above.

Input: mat[][] = [[32, 44, 27, 23], [54, 28, 50, 62]]
Output: [32, 44, 27, 23, 62, 50, 28, 54]
Explanation: Applying same technique as shown above, output will be [32, 44, 27, 23, 62, 50, 28, 54].


Constraints:
1 <= n, m <= 1000
0 <= mat[i][j]<= 100



//{ Driver Code Starts
import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int r = sc.nextInt();
            int c = sc.nextInt();

            int matrix[][] = new int[r][c];

            for (int i = 0; i < r; i++) {
                for (int j = 0; j < c; j++) matrix[i][j] = sc.nextInt();
            }
            Solution ob = new Solution();
            ArrayList<Integer> ans = ob.spirallyTraverse(matrix);
            for (Integer val : ans) System.out.print(val + " ");
            System.out.println();

            System.out.println("~");
        }
    }
}
// } Driver Code Ends


class Solution {
    // Function to return a list of integers denoting spiral traversal of matrix.
    public ArrayList<Integer> spirallyTraverse(int mat[][]) {
        // code here
        ArrayList<Integer> ans = new ArrayList<>();
        
        int n=mat.length;
        int m=mat[0].length;
        
        int top=0;
        int left=0;
        int bottom=n-1;
        int right=m-1;
        
        while(top<=bottom && left<=right)
        {
            //1st left to right.
            for(int i=left;i<=right;i++)
            {
                ans.add(mat[top][i]);
            }
            top++;
            
            //2nd top to bottom
            for(int i=top;i<=bottom;i++)
            {
                ans.add(mat[i][right]);
            }
            right--;
            
            //3rd right to left
            if(top<=bottom)
            {
                for(int i=right;i>=left;i--)
                {
                    ans.add(mat[bottom][i]);
                }
            }
            bottom--;
            
            //4th bottom to top
            if(left<=right)
            {
                for(int i=bottom;i>=top;i--)
                {
                    ans.add(mat[i][left]);
                }
            }
            left++;
        }
        return ans;
    }
}
