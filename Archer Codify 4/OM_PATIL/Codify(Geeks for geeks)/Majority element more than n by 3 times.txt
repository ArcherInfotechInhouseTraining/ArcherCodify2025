Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]
 

Constraints:

1 <= nums.length <= 5 * 104
-109 <= nums[i] <= 109
 

Follow up: Could you solve the problem in linear time and in O(1) space?









Solutions:

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int n=nums.length;
        HashMap<Integer,Integer> map=new HashMap<>();
        List<Integer> li=new ArrayList<Integer>();
        
        //count occurence of each number.((iteration))
        for(int val:nums)
        {
            map.put(val,map.getOrDefault(val,0)+1);
        }

        //check for majority condition (>n/3)
        //iterating over items.
        for(Map.Entry<Integer,Integer> entry : map.entrySet())
        {
            if(entry.getValue()>n/3)
            {
                li.add(entry.getKey());  //also entry.getValue();
            }
        }
        return li;
    }
}